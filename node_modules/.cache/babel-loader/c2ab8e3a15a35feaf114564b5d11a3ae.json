{"ast":null,"code":"var _jsxFileName = \"/home/bill/Bureau/sol/Bataille-Navale/src/Utils/SessionProvider.js\";\nimport React, { createContext, Component } from \"react\";\nimport * as Cookies from \"js-cookie\";\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\n\nexport const SessionContext = createContext('session');\nexport function withSessionContext(Component) {\n  return function WrapperComponent(props) {\n    return React.createElement(SessionContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    })));\n  };\n}\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\n\nclass SessionProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.setState({\n        session: this.getSession(),\n        isLogged: JSON.stringify(this.getSession()) !== \"{}\"\n      });\n    };\n\n    this.updateSession = async session => {\n      Cookies.remove(\"bn-user\");\n      Cookies.set(\"bn-user\", session, {\n        expires: 14\n      });\n      await this.setState(prevState => {\n        return {\n          isLogged: true,\n          session: session\n        };\n      });\n    };\n\n    this.getSession = () => {\n      const sessionCookie = Cookies.get(\"bn-user\");\n\n      if (sessionCookie === undefined || sessionCookie === null) {\n        return {};\n      } else {\n        return JSON.parse(sessionCookie);\n      }\n    };\n\n    this.removeSession = () => {\n      Cookies.remove(\"bn-user\");\n      this.setState(prevState => {\n        return {\n          isLogged: false,\n          session: {}\n        };\n      });\n    };\n\n    this.state = {\n      session: this.getSession(),\n      isLogged: JSON.stringify(this.getSession()) !== \"{}\",\n      getSession: () => this.getSession(),\n      updateSession: session => this.updateSession(session),\n      removeSession: () => this.removeSession()\n    };\n  }\n\n  render() {\n    return (\n      /**\n       * la propriété value est très importante ici, elle rend\n       * le contenu du state disponible aux `Consumers` de l'application\n       */\n      React.createElement(SessionContext.Provider, {\n        value: { ...this.state\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.props.children)\n    );\n  }\n\n}\n\nexport default SessionProvider;","map":{"version":3,"sources":["/home/bill/Bureau/sol/Bataille-Navale/src/Utils/SessionProvider.js"],"names":["React","createContext","Component","Cookies","SessionContext","withSessionContext","WrapperComponent","props","value","SessionProvider","constructor","componentDidMount","setState","session","getSession","isLogged","JSON","stringify","updateSession","remove","set","expires","prevState","sessionCookie","get","undefined","parse","removeSession","state","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA;;;;;;;;;AAQA,OAAO,MAAMC,cAAc,GAAGH,aAAa,CAAC,SAAD,CAApC;AAEP,OAAO,SAASI,kBAAT,CAA4BH,SAA5B,EAAuC;AAC1C,SAAO,SAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AACpC,WACI,oBAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,KAAK,IAAI,oBAAC,SAAD,oBAAeD,KAAf;AAAsB,MAAA,OAAO,EAAEC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADd,CADJ;AAKH,GAND;AAOH;AACD;;;;;;;AAMA,MAAMC,eAAN,SAA8BP,SAA9B,CAAwC;AACpCQ,EAAAA,WAAW,CAACH,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBI,iBAVmB,GAUC,MAAK;AACL,WAAKC,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAC,KAAKC,UAAL,EAAT;AAA4BC,QAAAA,QAAQ,EAACC,IAAI,CAACC,SAAL,CAAe,KAAKH,UAAL,EAAf,MAAoC;AAAzE,OAAd;AAEnB,KAbkB;;AAAA,SAcnBI,aAdmB,GAcH,MAAOL,OAAP,IAAiB;AAC7BV,MAAAA,OAAO,CAACgB,MAAR,CAAe,SAAf;AACAhB,MAAAA,OAAO,CAACiB,GAAR,CAAY,SAAZ,EAAuBP,OAAvB,EAAgC;AAAEQ,QAAAA,OAAO,EAAE;AAAX,OAAhC;AACA,YAAM,KAAKT,QAAL,CAAcU,SAAS,IAAE;AAC3B,eAAO;AACHP,UAAAA,QAAQ,EAAE,IADP;AAEHF,UAAAA,OAAO,EAACA;AAFL,SAAP;AAIH,OALK,CAAN;AAMH,KAvBkB;;AAAA,SAwBnBC,UAxBmB,GAwBP,MAAI;AACZ,YAAMS,aAAa,GAAGpB,OAAO,CAACqB,GAAR,CAAY,SAAZ,CAAtB;;AAEA,UAAID,aAAa,KAAKE,SAAlB,IAA+BF,aAAa,KAAI,IAApD,EAA0D;AACtD,eAAO,EAAP;AACH,OAFD,MAEO;AACH,eAAOP,IAAI,CAACU,KAAL,CAAWH,aAAX,CAAP;AACH;AACJ,KAhCkB;;AAAA,SAiCnBI,aAjCmB,GAiCJ,MAAI;AACfxB,MAAAA,OAAO,CAACgB,MAAR,CAAe,SAAf;AACA,WAAKP,QAAL,CAAcU,SAAS,IAAE;AACrB,eAAO;AACHP,UAAAA,QAAQ,EAAE,KADP;AAEHF,UAAAA,OAAO,EAAE;AAFN,SAAP;AAIH,OALD;AAMH,KAzCkB;;AAEf,SAAKe,KAAL,GAAa;AACTf,MAAAA,OAAO,EAAC,KAAKC,UAAL,EADC;AAETC,MAAAA,QAAQ,EAACC,IAAI,CAACC,SAAL,CAAe,KAAKH,UAAL,EAAf,MAAoC,IAFpC;AAGTA,MAAAA,UAAU,EAAC,MAAK,KAAKA,UAAL,EAHP;AAITI,MAAAA,aAAa,EAAEL,OAAD,IAAa,KAAKK,aAAL,CAAmBL,OAAnB,CAJlB;AAKTc,MAAAA,aAAa,EAAC,MAAI,KAAKA,aAAL;AALT,KAAb;AAOH;;AAiCDE,EAAAA,MAAM,GAAG;AACL;AACI;;;;AAIA,0BAAC,cAAD,CAAgB,QAAhB;AAAyB,QAAA,KAAK,EAAE,EAAC,GAAG,KAAKD;AAAT,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKrB,KAAL,CAAWuB,QADhB;AALJ;AASH;;AArDmC;;AAwDxC,eAAerB,eAAf","sourcesContent":["import React, { createContext, Component } from \"react\";\nimport * as Cookies from \"js-cookie\";\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\nexport const SessionContext = createContext('session');\n\nexport function withSessionContext(Component) {\n    return function WrapperComponent(props) {\n        return (\n            <SessionContext.Consumer>\n                {value => <Component {...props} context={value} />}\n            </SessionContext.Consumer>\n        );\n    };\n}\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\nclass SessionProvider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            session:this.getSession(),\n            isLogged:JSON.stringify(this.getSession())!==\"{}\",\n            getSession:()=> this.getSession(),\n            updateSession:(session) => this.updateSession(session),\n            removeSession:()=>this.removeSession()\n        };\n    }\n    componentDidMount = () =>{\n                        this.setState({session:this.getSession() ,isLogged:JSON.stringify(this.getSession())!==\"{}\"});\n\n    };\n    updateSession = async (session)=>{\n        Cookies.remove(\"bn-user\");\n        Cookies.set(\"bn-user\", session, { expires: 14 });\n        await this.setState(prevState=>{\n            return {\n                isLogged: true,\n                session:session\n            }\n        });\n    };\n    getSession= ()=>{\n        const sessionCookie = Cookies.get(\"bn-user\");\n\n        if (sessionCookie === undefined || sessionCookie=== null) {\n            return {};\n        } else {\n            return JSON.parse(sessionCookie);\n        }\n    };\n    removeSession= ()=>{\n        Cookies.remove(\"bn-user\");\n        this.setState(prevState=>{\n            return {\n                isLogged: false,\n                session: {}\n            }\n        })\n    };\n    render() {\n        return (\n            /**\n             * la propriété value est très importante ici, elle rend\n             * le contenu du state disponible aux `Consumers` de l'application\n             */\n            <SessionContext.Provider value={{...this.state}}>\n                {this.props.children}\n            </SessionContext.Provider>\n        );\n    }\n}\n\nexport default SessionProvider;"]},"metadata":{},"sourceType":"module"}